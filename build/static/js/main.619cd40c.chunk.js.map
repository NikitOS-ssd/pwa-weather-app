{"version":3,"sources":["keys.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","BASE_URL","api","key","keys","base","App","useState","query","setQuery","weather","setWeather","className","current","temp_c","type","placeholder","id","onChange","e","target","value","onKeyPress","fetch","then","res","json","result","location","name","country","d","date","String","window","Date","slice","dateBuild","Math","round","condition","text","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.619cd40c.chunk.js","sourcesContent":["module.exports = {\n  API_KEY: '55372cd6962f4028b77160038201605',\n  BASE_URL: 'https://api.weatherapi.com/v1/current.json?key='\n}","import React, { useState } from \"react\";\nimport keys from \"./keys\";\n\nconst api = {\n  key: keys.API_KEY,\n  base: keys.BASE_URL,\n};\n\nfunction App() {\n  const dateBuild = (d) => {\n    let date = String(new window.Date());\n    date = date.slice(3, 15);\n    return date;\n  };\n\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      fetch(`${api.base}${api.key}&q=${query}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setQuery(\"\");\n          setWeather(result);\n        });\n    }\n  };\n\n  return (\n    <div\n      className={\n        typeof weather.current != \"undefined\"\n          ? weather.current.temp_c > 18\n            ? \"App hot\"\n            : \"App cold\"\n          : \"App\"\n      }\n    >\n      <main>\n        <div className=\"search-container\">\n          <label>\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              className=\"search-bar\"\n              id=\"search-bar\"\n              onChange={(e) => setQuery(e.target.value)}\n              value={query}\n              onKeyPress={search}\n            />\n          </label>\n        </div>\n        {typeof weather.current != \"undefined\" ? (\n          <div>\n            <div className=\"location-container\">\n              <div className=\"location\">\n                {weather.location.name}, {weather.location.country}\n              </div>\n              <div className=\"date\"> {dateBuild(new Date())}</div>\n            </div>\n            <div className=\"weather-container\">\n              <div className=\"temperature\">\n                {Math.round(weather.current.temp_c)}Â°C\n              </div>\n\n              <div className=\"weather\">{weather.current.condition.text}</div>\n            </div>\n          </div>\n        ) : (\n            \"\"\n          )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}